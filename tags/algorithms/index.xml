<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithms on Hugo Veríssimo</title><link>https://hugoverissimo21.github.io/tags/algorithms/</link><description>Recent content in Algorithms on Hugo Veríssimo</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 16 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://hugoverissimo21.github.io/tags/algorithms/index.xml" rel="self" type="application/rss+xml"/><item><title>Smart Workbench</title><link>https://hugoverissimo21.github.io/projects/smartworkbench/</link><pubDate>Mon, 16 Jun 2025 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/projects/smartworkbench/</guid><description>&lt;p>As part of the Master&amp;rsquo;s Degree in Data Science at the University of Aveiro, in the Seminar course, our class created a fictitious startup called Smart Workbench, aiming to develop a system based on unstructured data (cameras) and structured data (timings and logs) to automate and optimize a production line.&lt;/p>
&lt;p>The goal was to maximize line efficiency by reducing wait times and increasing productivity through data analysis and the use of machine learning and deep learning algorithms, helping predict failures, optimize processes, and reduce operators&amp;rsquo; cognitive load.&lt;/p></description></item><item><title>Sorting Algorithms</title><link>https://hugoverissimo21.github.io/projects/sortingalgorithms/</link><pubDate>Fri, 13 Jun 2025 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/projects/sortingalgorithms/</guid><description>&lt;p>This project includes implementations and comparative tests in Python of nine important sorting algorithms: Bubble Sort, Selection Sort, Insertion Sort, Counting Sort, Radix Sort, Quick Sort, Merge Sort, Heap Sort, and Timsort.&lt;/p>
&lt;p>The main goal was to theoretically explore the operation, complexity, and stability of each algorithm, as well as to run empirical tests on random lists of various sizes and characteristics. Results were validated through performance analysis and charts.&lt;/p></description></item><item><title>LSH Recommender System</title><link>https://hugoverissimo21.github.io/projects/lshrecommender/</link><pubDate>Tue, 27 May 2025 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/projects/lshrecommender/</guid><description>&lt;p>Creation and benchmarking of a rating prediction algorithm based on LSH (Locality Sensitive Hashing) for large volumes of data from the MovieLens dataset. The goal is to predict a user&amp;rsquo;s rating for a specific movie, using advanced hashing techniques to optimize the search for similarities between users and movies.&lt;/p>
&lt;p>The algorithm was implemented in a high-performance computing environment, executed via SSH with distributed jobs on Apache Spark. This approach enables analysis and recommendation on large-scale datasets, ranging from 100 thousand to 25 million ratings, demonstrating the scalability and efficiency of the system in big data contexts.&lt;/p></description></item><item><title>Frequent Word Analysis in Books</title><link>https://hugoverissimo21.github.io/projects/frequentwordfinder/</link><pubDate>Tue, 24 Dec 2024 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/projects/frequentwordfinder/</guid><description>&lt;p>Using the online Project Gutenberg library, three translations of the book &lt;em>Pinocchio&lt;/em>—in English, Italian, and Finnish—were selected. The goal of the project was to apply and compare different word counting algorithms to identify the most frequent words in each version, and to analyze similarities and differences between the texts.&lt;/p>
&lt;p>Three types of algorithms were used:&lt;/p>
&lt;ul>
&lt;li>exact counters,&lt;/li>
&lt;li>probabilistic counters (such as hash-based methods),&lt;/li>
&lt;li>space-saving counters (with memory optimization).&lt;/li>
&lt;/ul>
&lt;p>The analysis involved:&lt;/p></description></item><item><title>Maximum Cut Problem (Max-Cut)</title><link>https://hugoverissimo21.github.io/projects/max-weighted-cut/</link><pubDate>Sat, 09 Nov 2024 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/projects/max-weighted-cut/</guid><description>&lt;p>The Maximum Cut (Max-Cut) problem is an NP-hard problem that consists of dividing a graph into two subsets with the objective of maximizing the weight of the edges cut between them. This project focuses on solving the problem using both deterministic and stochastic algorithms, including Simulated Annealing.&lt;/p>
&lt;p>The work is divided into two main approaches:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Deterministic algorithms:&lt;br>with implementations of exhaustive search and greedy search for exact or approximate solutions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Stochastic algorithms:&lt;br>including methods such as Random Cut, Simulated Annealing, and Greedy Randomized approaches, which seek approximate solutions efficiently.&lt;/p></description></item></channel></rss>