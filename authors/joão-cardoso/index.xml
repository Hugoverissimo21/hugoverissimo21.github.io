<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>João Cardoso on Hugo Veríssimo</title><link>https://hugoverissimo21.github.io/authors/jo%C3%A3o-cardoso/</link><description>Recent content in João Cardoso on Hugo Veríssimo</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 13 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://hugoverissimo21.github.io/authors/jo%C3%A3o-cardoso/index.xml" rel="self" type="application/rss+xml"/><item><title>Sorting Algorithms</title><link>https://hugoverissimo21.github.io/projects/sortingalgorithms/</link><pubDate>Fri, 13 Jun 2025 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/projects/sortingalgorithms/</guid><description>&lt;p>This project includes implementations and comparative tests in Python of nine important sorting algorithms: Bubble Sort, Selection Sort, Insertion Sort, Counting Sort, Radix Sort, Quick Sort, Merge Sort, Heap Sort, and Timsort.&lt;/p>
&lt;p>The main goal was to theoretically explore the operation, complexity, and stability of each algorithm, as well as to run empirical tests on random lists of various sizes and characteristics. Results were validated through performance analysis and charts.&lt;/p></description></item><item><title>Sentiment Analysis of Financial Phrases</title><link>https://hugoverissimo21.github.io/projects/finphrasebank/</link><pubDate>Tue, 10 Jun 2025 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/projects/finphrasebank/</guid><description>&lt;p>This project focused on sentiment analysis of financial phrases, based on the FinPhraseBank dataset, which contains sentences extracted from financial reports and news articles. The goal was to develop a model capable of classifying the sentiment of these phrases as positive, negative, or neutral, thus contributing to a better understanding of the emotional impact of financial information.&lt;/p>
&lt;p>The subset with 75% annotator agreement was used to ensure higher reliability of the labels. Of this dataset, 80% was used for training and 20% for testing, ensuring accurate performance evaluation.&lt;/p></description></item><item><title>Counting Photovoltaic and Solar Panels from Aerial Images</title><link>https://hugoverissimo21.github.io/projects/solarpanel-dlcounter/</link><pubDate>Mon, 05 May 2025 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/projects/solarpanel-dlcounter/</guid><description>&lt;p>This project aims to count photovoltaic and solar panels from aerial images using Deep Learning and Computer Vision techniques. It was developed as part of the Zindi Lacuna competition, which provided images of panels in Madagascar.&lt;/p>
&lt;p>The work involved data cleaning and preprocessing, including correction of various polygons.&lt;/p>
&lt;div style="display: flex; align-items: center; gap: 20px;">
 &lt;div style="flex: 1;">
 &lt;p>Creation of hybrid models combining ResNet, EfficientNet, and DenseNet to extract image features, with an attention head to aggregate features extracted from image metadata, for subsequent regression of the number of each panel type.&lt;/p></description></item><item><title>Recommender Systems</title><link>https://hugoverissimo21.github.io/projects/mldriven-collabfilter/</link><pubDate>Sat, 25 Jan 2025 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/projects/mldriven-collabfilter/</guid><description>&lt;p>This project involved exploratory analysis of a movie ratings dataset, with the goal of predicting the rating a user would give to a movie based on ratings from other users.&lt;/p>
&lt;p>Two manually built linear regression models were used to predict ratings: one based solely on users and their ratings, and another incorporating movie metadata as well.&lt;/p>
&lt;p>The FunkSVD model was also implemented.&lt;/p>
&lt;p>The methodology included selecting the best hyperparameters through cross-validation, as well as choosing the final model based on RMSE and MAE metrics. Additionally, Precision@k, Recall@k, F1@k, and MRR@k metrics were used to evaluate the recommendation models&amp;rsquo; performance.&lt;/p></description></item><item><title>Fatigue Classification in Competitive Swimmers</title><link>https://hugoverissimo21.github.io/projects/swimml-fatiguemonitor/</link><pubDate>Wed, 27 Nov 2024 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/projects/swimml-fatiguemonitor/</guid><description>&lt;p>This project focuses on applying Machine Learning to estimate fatigue levels in swimmers, with the goal of preventing overuse injuries.&lt;/p>
&lt;p>Data was collected from a local swimming team, covering multiple athletes. Data preprocessing was conducted to ensure quality, integrity, and suitability for machine learning algorithms.&lt;/p>
&lt;p>Feature engineering extracted relevant variables from raw data, notably using EWMA (Exponentially Weighted Moving Average).&lt;/p>
&lt;p>Models such as Support Vector Machine (SVM), logistic regression, and decision trees were used to classify data into three fatigue levels.&lt;/p></description></item></channel></rss>