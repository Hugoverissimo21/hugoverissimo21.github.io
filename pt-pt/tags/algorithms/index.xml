<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithms on Hugo Veríssimo</title><link>https://hugoverissimo21.github.io/pt-pt/tags/algorithms/</link><description>Recent content in Algorithms on Hugo Veríssimo</description><generator>Hugo</generator><language>pt-pt</language><lastBuildDate>Mon, 16 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://hugoverissimo21.github.io/pt-pt/tags/algorithms/index.xml" rel="self" type="application/rss+xml"/><item><title>Smart Workbench</title><link>https://hugoverissimo21.github.io/pt-pt/projects/smartworkbench/</link><pubDate>Mon, 16 Jun 2025 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/pt-pt/projects/smartworkbench/</guid><description>&lt;p>No âmbito do Mestrado em Ciência de Dados na Universidade de Aveiro, na cadeira de Seminário, enquanto turma criámos uma startup fictícia chamada Smart Workbench, com o objetivo de desenvolver um sistema baseado em dados não estruturados (câmeras) e estruturados (tempos e logs) para automatizar e otimizar uma linha de produção.&lt;/p>
&lt;p>A ideia era maximizar a eficiência da linha, reduzindo o tempo de espera e aumentando a produtividade através da análise de dados e do uso de algoritmos de machine learning e deep learning, ajudando a prever falhas, otimizar processos e aliviar a carga cognitiva dos operadores.&lt;/p></description></item><item><title>Algoritmos de Ordenação</title><link>https://hugoverissimo21.github.io/pt-pt/projects/sortingalgorithms/</link><pubDate>Fri, 13 Jun 2025 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/pt-pt/projects/sortingalgorithms/</guid><description>&lt;p>Este projeto inclui implementações e testes comparativos em Python de nove algoritmos importantes de ordenação: Bubble Sort, Selection Sort, Insertion Sort, Counting Sort, Radix Sort, Quick Sort, Merge Sort, Heap Sort e Timsort.&lt;/p>
&lt;p>O objetivo principal foi explorar teoricamente o funcionamento, complexidade e estabilidade de cada algoritmo, além de executar testes empíricos em listas aleatórias de vários tamanhos e características. Os resultados foram validados através de gráficos e análise de desempenho.&lt;/p></description></item><item><title>LSH Recommender System</title><link>https://hugoverissimo21.github.io/pt-pt/projects/lshrecommender/</link><pubDate>Tue, 27 May 2025 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/pt-pt/projects/lshrecommender/</guid><description>&lt;p>Criação e benchmark de um algoritmo de previsão de avaliações baseado em LSH (Locality Sensitive Hashing) para grandes volumes de dados do dataset MovieLens. O objetivo é prever a avaliação de um utilizador para um filme específico, utilizando técnicas avançadas de hashing para otimizar a procura por similaridades entre utilizadores e filmes.&lt;/p>
&lt;p>O algoritmo foi implementado em ambiente de &lt;em>high performance computing&lt;/em>, com execução via SSH e jobs distribuídos em Apache Spark. Esta abordagem permite análise e recomendação de filmes em datasets de grandes dimensões, desde 100 mil até 25 milhões de avaliações, demonstrando a escalabilidade e eficiência do sistema em contextos de &lt;em>big data&lt;/em>.&lt;/p></description></item><item><title>Análise de Palavras Frequentes em Livros</title><link>https://hugoverissimo21.github.io/pt-pt/projects/frequentwordfinder/</link><pubDate>Tue, 24 Dec 2024 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/pt-pt/projects/frequentwordfinder/</guid><description>&lt;p>Através da biblioteca online Project Gutenberg, foram selecionadas três traduções do livro Pinóquio, em inglês, italiano e finlandês. O objetivo do projeto foi aplicar e comparar diferentes algoritmos de contagem de palavras para identificar as palavras mais frequentes em cada versão, e analisar semelhanças e diferenças entre os textos.&lt;/p>
&lt;p>Foram utilizados três tipos de algoritmos:&lt;/p>
&lt;ul>
&lt;li>contadores exatos,&lt;/li>
&lt;li>contadores probabilísticos (como os baseados em hashing),&lt;/li>
&lt;li>contadores space-saving (com otimização de memória).&lt;/li>
&lt;/ul>
&lt;p>A análise consistiu em:&lt;/p></description></item><item><title>Problema do Corte-Máximo (Max-Cut)</title><link>https://hugoverissimo21.github.io/pt-pt/projects/max-weighted-cut/</link><pubDate>Sat, 09 Nov 2024 00:00:00 +0000</pubDate><guid>https://hugoverissimo21.github.io/pt-pt/projects/max-weighted-cut/</guid><description>&lt;p>O problema do corte-máximo (Max-Cut) é um problema NP-difícil que consiste em dividir um grafo em dois subconjuntos, com o objetivo de maximizar o peso das arestas cortadas entre eles. Este projeto foca-se na resolução do problema utilizando tanto algoritmos determinísticos como estocásticos, incluindo o Simulated Annealing.&lt;/p>
&lt;p>O trabalho está dividido em duas vertentes principais:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Algoritmos determinísticos:&lt;br>com implementação de pesquisa exaustiva e pesquisa gulosa para solução exata ou aproximada.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Algoritmos estocásticos:&lt;br>com métodos como Corte Aleatório, Simulated Annealing e Guloso Aleatório, que buscam soluções aproximadas de forma eficiente.&lt;/p></description></item></channel></rss>